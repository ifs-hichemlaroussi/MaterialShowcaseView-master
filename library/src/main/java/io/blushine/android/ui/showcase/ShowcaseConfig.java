package io.blushine.android.ui.showcase;

import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.os.Build;
import android.support.annotation.ColorInt;
import android.support.annotation.ColorRes;

import java.util.ArrayList;
import java.util.List;

public class ShowcaseConfig {
	static final long ANIMATION_IN_TIME = 300;
	static final long ANIMATION_HIDE_TIME = 300;
	static final long ANIMATION_PRESSED_TIME = 300;
	static int mBackgroundColorDefault = -1;
	static int mDismissBackgroundColorDefault = -1;
	static int mTargetRadiusDefault = -1;
	static int mTargetNearBorderDistance = -1;
	static int mTargetPadding = -1;
	private static boolean mInitialized = false;
	List<ShowcaseListener> mListeners = new ArrayList<>();
	private long mDelay = -1;
	private int mDismissBackgroundColor = -1;
	private int mBackgroundColor = -1;
	private int mTitleTextColor = -1;
	private int mContentTextColor = -1;
	private int mDismissTextColor = -1;
	private Boolean mRenderOverNav = null;

	public ShowcaseConfig(Context context) {
		init(context);
	}

	static void init(Context context) {
		if (!mInitialized) {
			Resources resources = context.getResources();
			mBackgroundColorDefault = getColor(resources, R.color.material_showcase_background);
			mDismissBackgroundColorDefault = getColor(resources, R.color.material_showcase_dismiss_background);
			mTargetRadiusDefault = resources.getDimensionPixelSize(R.dimen.material_showcase_target_radius);
			mTargetNearBorderDistance = resources.getDimensionPixelSize(R.dimen.material_showcase_target_near_border);
			mTargetPadding = resources.getDimensionPixelOffset(R.dimen.material_showcase_target_padding);
			mInitialized = true;
		}
	}

	/**
	 * Returns a themed color integer associated with a particular resource ID. If the resource holds a
	 * complex {@link ColorStateList}, then the default color from the set is returned.
	 * @param resources location of the color resource
	 * @param id The desired resource identifier, as generated by the aapt tool. This integer encodes
	 * the package, type, and resource entry. The value 0 is an invalid identifier.
	 * @return A single color value in the form 0xAARRGGBB.
	 * @throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist.
	 */
	@ColorInt
	@SuppressWarnings("deprecated")
	private static int getColor(Resources resources, @ColorRes int id) throws Resources.NotFoundException {
		if (Build.VERSION.SDK_INT <= 22) {
			return resources.getColor(id);
		} else {
			return resources.getColor(id, null);
		}
	}

	public int getDismissBackgroundColor() {
		return mDismissBackgroundColor;
	}

	/**
	 * Set the background color of the hide button. By default this is {@link
	 * io.blushine.android.ui.showcase.R.color#material_showcase_dismiss_background}
	 * @param backgroundColor background color of the hide button
	 */
	public void setDismissBackgroundColor(int backgroundColor) {
		mDismissBackgroundColor = backgroundColor;
	}

	public boolean isDismissBackgroundColorSet() {
		return mDismissBackgroundColor != -1;
	}

	public long getDelay() {
		return mDelay;
	}

	/**
	 * Delay the showcase for X milliseconds after calling {@link MaterialShowcaseView#show()}
	 * @param delayInMillis milliseconds to delay the showcase for after calling {@link
	 * MaterialShowcaseView#show()}
	 */
	public void setDelay(long delayInMillis) {
		mDelay = delayInMillis;
	}

	public boolean isDelaySet() {
		return mDelay >= 0;
	}

	public int getBackgroundColor() {
		return mBackgroundColor;
	}

	/**
	 * Set the background color of the circle or fullscreen area.
	 * @param backgroundColor the background color to use. Note that according to Material's design
	 * document the opacity of the color should be 96%, 246, or F5.
	 */
	public void setBackgroundColor(int backgroundColor) {
		mBackgroundColor = backgroundColor;
	}

	public boolean isBackgroundColorSet() {
		return mBackgroundColor != -1;
	}

	public int getTitleTextColor() {
		return mTitleTextColor;
	}

	/**
	 * Set the color of the title text. By default this is {@link io.blushine.android.ui.showcase.R.color#material_showcase_text_primary}
	 * @param textColor color of the title text
	 */
	public void setTitleTextColor(int textColor) {
		mTitleTextColor = textColor;
	}

	public boolean isTitleTextColorSet() {
		return mTitleTextColor != -1;
	}

	public int getContentTextColor() {
		return mContentTextColor;
	}

	/**
	 * Set the color of the content description. By default this is {@link
	 * io.blushine.android.ui.showcase.R.color#material_showcase_text_secondary}
	 * @param textColor color of the content description text
	 */
	public void setContentTextColor(int textColor) {
		mContentTextColor = textColor;
	}

	public boolean isContentTextColorSet() {
		return mContentTextColor != -1;
	}

	public int getDismissTextColor() {
		return mDismissTextColor;
	}

	/**
	 * Set the color of the hide text. By default this is {@link io.blushine.android.ui.showcase.R.color#material_showcase_text_secondary}
	 * @param textColor color of the hide button text
	 */
	public void setDismissTextColor(int textColor) {
		mDismissTextColor = textColor;
	}

	public boolean isDismissTextColorSet() {
		return mDismissTextColor != -1;
	}

	public Boolean getRenderOverNavigationBar() {
		return mRenderOverNav;
	}

	/**
	 * Render above the navigation bar. Only has some effect in Lollipop or above.
	 * @param renderOverNav true to render above the navigation bar
	 */
	public void setRenderOverNavigationBar(boolean renderOverNav) {
		mRenderOverNav = renderOverNav;
	}

	public boolean isRenderOverNavigationBarSet() {
		return mRenderOverNav != null;
	}

	/**
	 * Add a showcase listener to listen to hide, display, and skipped events.
	 * @param listener showcase listener
	 */
	public void addListener(ShowcaseListener listener) {
		mListeners.add(listener);
	}

	/**
	 * Remove a showcase listener
	 * @param listener showcase listener to remove
	 */
	public void removeListener(MaterialShowcaseSequence listener) {
		mListeners.remove(listener);
	}

	public List<ShowcaseListener> getListeners() {
		return mListeners;
	}
}
